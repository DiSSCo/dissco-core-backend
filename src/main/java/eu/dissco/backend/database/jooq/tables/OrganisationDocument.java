/*
 * This file is generated by jOOQ.
 */
package eu.dissco.backend.database.jooq.tables;


import eu.dissco.backend.database.jooq.Keys;
import eu.dissco.backend.database.jooq.Public;
import eu.dissco.backend.database.jooq.tables.records.OrganisationDocumentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganisationDocument extends TableImpl<OrganisationDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organisation_document</code>
     */
    public static final OrganisationDocument ORGANISATION_DOCUMENT = new OrganisationDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganisationDocumentRecord> getRecordType() {
        return OrganisationDocumentRecord.class;
    }

    /**
     * The column <code>public.organisation_document.organisation_id</code>.
     */
    public final TableField<OrganisationDocumentRecord, String> ORGANISATION_ID = createField(DSL.name("organisation_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_document.document_id</code>.
     */
    public final TableField<OrganisationDocumentRecord, String> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.organisation_document.document_title</code>.
     */
    public final TableField<OrganisationDocumentRecord, String> DOCUMENT_TITLE = createField(DSL.name("document_title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_document.document_type</code>.
     */
    public final TableField<OrganisationDocumentRecord, String> DOCUMENT_TYPE = createField(DSL.name("document_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_document.document</code>.
     */
    public final TableField<OrganisationDocumentRecord, JSONB> DOCUMENT = createField(DSL.name("document"), SQLDataType.JSONB, this, "");

    private OrganisationDocument(Name alias, Table<OrganisationDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrganisationDocument(Name alias, Table<OrganisationDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.organisation_document</code> table reference
     */
    public OrganisationDocument(String alias) {
        this(DSL.name(alias), ORGANISATION_DOCUMENT);
    }

    /**
     * Create an aliased <code>public.organisation_document</code> table reference
     */
    public OrganisationDocument(Name alias) {
        this(alias, ORGANISATION_DOCUMENT);
    }

    /**
     * Create a <code>public.organisation_document</code> table reference
     */
    public OrganisationDocument() {
        this(DSL.name("organisation_document"), null);
    }

    public <O extends Record> OrganisationDocument(Table<O> child, ForeignKey<O, OrganisationDocumentRecord> key) {
        super(child, key, ORGANISATION_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrganisationDocumentRecord> getPrimaryKey() {
        return Keys.ORGANISATION_DOCUMENT_PKEY;
    }

    @Override
    public List<UniqueKey<OrganisationDocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganisationDocumentRecord>>asList(Keys.ORGANISATION_DOCUMENT_PKEY);
    }

    @Override
    public List<ForeignKey<OrganisationDocumentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrganisationDocumentRecord, ?>>asList(Keys.ORGANISATION_DOCUMENT__FK_ORGANISATION);
    }

    private transient OrganisationDo _organisationDo;

    public OrganisationDo organisationDo() {
        if (_organisationDo == null)
            _organisationDo = new OrganisationDo(this, Keys.ORGANISATION_DOCUMENT__FK_ORGANISATION);

        return _organisationDo;
    }

    @Override
    public OrganisationDocument as(String alias) {
        return new OrganisationDocument(DSL.name(alias), this);
    }

    @Override
    public OrganisationDocument as(Name alias) {
        return new OrganisationDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganisationDocument rename(String name) {
        return new OrganisationDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganisationDocument rename(Name name) {
        return new OrganisationDocument(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, JSONB> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
