/*
 * This file is generated by jOOQ.
 */
package eu.dissco.backend.database.jooq.tables;


import eu.dissco.backend.database.jooq.Keys;
import eu.dissco.backend.database.jooq.Public;
import eu.dissco.backend.database.jooq.tables.records.OrganisationDoRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganisationDo extends TableImpl<OrganisationDoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organisation_do</code>
     */
    public static final OrganisationDo ORGANISATION_DO = new OrganisationDo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganisationDoRecord> getRecordType() {
        return OrganisationDoRecord.class;
    }

    /**
     * The column <code>public.organisation_do.id</code>.
     */
    public final TableField<OrganisationDoRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.organisation_do.organisation_name</code>.
     */
    public final TableField<OrganisationDoRecord, String> ORGANISATION_NAME = createField(DSL.name("organisation_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_do.organisation_code</code>.
     */
    public final TableField<OrganisationDoRecord, String> ORGANISATION_CODE = createField(DSL.name("organisation_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_do.city</code>.
     */
    public final TableField<OrganisationDoRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_do.country</code>.
     */
    public final TableField<OrganisationDoRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_do.country_code</code>.
     */
    public final TableField<OrganisationDoRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organisation_do.data</code>.
     */
    public final TableField<OrganisationDoRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB, this, "");

    private OrganisationDo(Name alias, Table<OrganisationDoRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrganisationDo(Name alias, Table<OrganisationDoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.organisation_do</code> table reference
     */
    public OrganisationDo(String alias) {
        this(DSL.name(alias), ORGANISATION_DO);
    }

    /**
     * Create an aliased <code>public.organisation_do</code> table reference
     */
    public OrganisationDo(Name alias) {
        this(alias, ORGANISATION_DO);
    }

    /**
     * Create a <code>public.organisation_do</code> table reference
     */
    public OrganisationDo() {
        this(DSL.name("organisation_do"), null);
    }

    public <O extends Record> OrganisationDo(Table<O> child, ForeignKey<O, OrganisationDoRecord> key) {
        super(child, key, ORGANISATION_DO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrganisationDoRecord> getPrimaryKey() {
        return Keys.ORGANISATION_DO_PKEY;
    }

    @Override
    public List<UniqueKey<OrganisationDoRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganisationDoRecord>>asList(Keys.ORGANISATION_DO_PKEY);
    }

    @Override
    public OrganisationDo as(String alias) {
        return new OrganisationDo(DSL.name(alias), this);
    }

    @Override
    public OrganisationDo as(Name alias) {
        return new OrganisationDo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganisationDo rename(String name) {
        return new OrganisationDo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganisationDo rename(Name name) {
        return new OrganisationDo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, JSONB> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
