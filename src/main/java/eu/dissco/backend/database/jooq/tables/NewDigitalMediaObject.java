/*
 * This file is generated by jOOQ.
 */
package eu.dissco.backend.database.jooq.tables;


import eu.dissco.backend.database.jooq.Indexes;
import eu.dissco.backend.database.jooq.Keys;
import eu.dissco.backend.database.jooq.Public;
import eu.dissco.backend.database.jooq.tables.records.NewDigitalMediaObjectRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewDigitalMediaObject extends TableImpl<NewDigitalMediaObjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.new_digital_media_object</code>
     */
    public static final NewDigitalMediaObject NEW_DIGITAL_MEDIA_OBJECT = new NewDigitalMediaObject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewDigitalMediaObjectRecord> getRecordType() {
        return NewDigitalMediaObjectRecord.class;
    }

    /**
     * The column <code>public.new_digital_media_object.id</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_digital_media_object.version</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.new_digital_media_object.type</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.new_digital_media_object.digital_specimen_id</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> DIGITAL_SPECIMEN_ID = createField(DSL.name("digital_specimen_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_digital_media_object.media_url</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> MEDIA_URL = createField(DSL.name("media_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.new_digital_media_object.format</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> FORMAT = createField(DSL.name("format"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.new_digital_media_object.source_system_id</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> SOURCE_SYSTEM_ID = createField(DSL.name("source_system_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_digital_media_object.created</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, Instant> CREATED = createField(DSL.name("created"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_digital_media_object.last_checked</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, Instant> LAST_CHECKED = createField(DSL.name("last_checked"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_digital_media_object.deleted</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, Instant> DELETED = createField(DSL.name("deleted"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.new_digital_media_object.data</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.new_digital_media_object.original_data</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, JSONB> ORIGINAL_DATA = createField(DSL.name("original_data"), SQLDataType.JSONB, this, "");

    /**
     * The column
     * <code>public.new_digital_media_object.physical_specimen_id</code>.
     */
    public final TableField<NewDigitalMediaObjectRecord, String> PHYSICAL_SPECIMEN_ID = createField(DSL.name("physical_specimen_id"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'unknown'::character varying"), SQLDataType.VARCHAR)), this, "");

    private NewDigitalMediaObject(Name alias, Table<NewDigitalMediaObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewDigitalMediaObject(Name alias, Table<NewDigitalMediaObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.new_digital_media_object</code> table
     * reference
     */
    public NewDigitalMediaObject(String alias) {
        this(DSL.name(alias), NEW_DIGITAL_MEDIA_OBJECT);
    }

    /**
     * Create an aliased <code>public.new_digital_media_object</code> table
     * reference
     */
    public NewDigitalMediaObject(Name alias) {
        this(alias, NEW_DIGITAL_MEDIA_OBJECT);
    }

    /**
     * Create a <code>public.new_digital_media_object</code> table reference
     */
    public NewDigitalMediaObject() {
        this(DSL.name("new_digital_media_object"), null);
    }

    public <O extends Record> NewDigitalMediaObject(Table<O> child, ForeignKey<O, NewDigitalMediaObjectRecord> key) {
        super(child, key, NEW_DIGITAL_MEDIA_OBJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NEW_DIGITAL_MEDIA_OBJECT_DIGITAL_SPECIMEN_ID_URL, Indexes.NEW_DIGITAL_MEDIA_OBJECT_ID_IDX, Indexes.NEW_DIGITAL_MEDIA_OBJECT_ID_VERSION_URL);
    }

    @Override
    public UniqueKey<NewDigitalMediaObjectRecord> getPrimaryKey() {
        return Keys.NEW_DIGITAL_MEDIA_OBJECT_PK;
    }

    @Override
    public NewDigitalMediaObject as(String alias) {
        return new NewDigitalMediaObject(DSL.name(alias), this);
    }

    @Override
    public NewDigitalMediaObject as(Name alias) {
        return new NewDigitalMediaObject(alias, this);
    }

    @Override
    public NewDigitalMediaObject as(Table<?> alias) {
        return new NewDigitalMediaObject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewDigitalMediaObject rename(String name) {
        return new NewDigitalMediaObject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewDigitalMediaObject rename(Name name) {
        return new NewDigitalMediaObject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewDigitalMediaObject rename(Table<?> name) {
        return new NewDigitalMediaObject(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, Integer, String, String, String, String, String, Instant, Instant, Instant, JSONB, JSONB, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super Instant, ? super JSONB, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super Instant, ? super JSONB, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
